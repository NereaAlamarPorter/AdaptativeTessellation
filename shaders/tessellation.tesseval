#version 400

layout(triangles, equal_spacing, cw) in;

in vec3 tcPosition[];
in vec3 tcNormal[];
in vec2 tcTextureCoord[];

out vec3 teNormal;
out vec2 teTextureCoord;

uniform sampler2D ColorTexture;  //! texture["images/earth.jpg"]

void main() {
/*
	//Mapa de desplazamiento

	vec3 p0 = gl_TessCoord.x * (tcPosition[0] +
			tcNormal[0]*(texture(ColorTexture,tcTextureCoord[0]).g*0.6 +
					texture(ColorTexture,tcTextureCoord[0]).r));

	vec3 p1 = gl_TessCoord.y * (tcPosition[1] +
			tcNormal[1]*(texture(ColorTexture,tcTextureCoord[1]).g*0.6 +
					texture(ColorTexture,tcTextureCoord[1]).r));

	vec3 p2 = gl_TessCoord.z * (tcPosition[2] +
			tcNormal[2]*(texture(ColorTexture,tcTextureCoord[2]).g*0.6 +
					texture(ColorTexture,tcTextureCoord[2]).r));
	*/
	//Sin mapa de desplazamiento
	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];

	teNormal = normalize(gl_TessCoord.x * tcNormal[0] + gl_TessCoord.y * tcNormal[1] + gl_TessCoord.z * tcNormal[2]);
	teTextureCoord = gl_TessCoord.x * tcTextureCoord[0] + gl_TessCoord.y * tcTextureCoord[1] + gl_TessCoord.z * tcTextureCoord[2];
	gl_Position = vec4(p0 + p1 + p2, 1);
}
